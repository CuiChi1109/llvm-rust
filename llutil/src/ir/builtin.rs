//! Module implementing a list of library functions

/// Module containing built-in names of LLVM functions.
#[allow(missing_docs)]
#[allow(clippy::missing_docs_in_private_items)]
pub mod llvm_lib {
    pub const LLVM_DBG_ADDR: &str = "llvm.dbg.addr";
    pub const LLVM_DBG_DECLARE: &str = "llvm.dbg.declare";
    pub const LLVM_DBG_VALUE: &str = "llvm.dbg.value";
}

/// Module containing built-in library function names of the C language.
#[allow(missing_docs)]
#[allow(clippy::missing_docs_in_private_items)]
pub mod c_lib {
    pub const ISOC99_FSCANF: &str = "__isoc99_fscanf";
    pub const ISOC99_SSCANF: &str = "__isoc99_sscanf";
    pub const ISOC99_SWSCANF: &str = "__isoc99_swscanf";
    pub const ISWXDIGIT: &str = "iswxdigit";
    pub const PRINTF: &str = "printf";
    pub const PUTS: &str = "puts";
    pub const RAND: &str = "rand";
    pub const SRAND: &str = "srand";
    pub const TIME: &str = "time";
    pub const WPRINTF: &str = "wprintf";
    pub const CTYPE_B_LOC: &str = "__ctype_b_loc";
}

/// Module containing the main function names of the C language.
#[allow(missing_docs)]
#[allow(clippy::missing_docs_in_private_items)]
pub mod cmain {
    pub const MAIN: &str = "main";
}

/// List of all considered C library functions.
pub const C_LIB_FUNCS: &[&str] = &[
    c_lib::ISOC99_FSCANF,
    c_lib::ISOC99_SSCANF,
    c_lib::ISWXDIGIT,
    c_lib::ISOC99_SWSCANF,
    c_lib::PRINTF,
    c_lib::PUTS,
    c_lib::RAND,
    c_lib::SRAND,
    c_lib::TIME,
    c_lib::WPRINTF,
    c_lib::CTYPE_B_LOC,
];

/// Module containing built-in names of assertion functions.
#[allow(missing_docs)]
#[allow(clippy::missing_docs_in_private_items)]
pub mod verazt_lib {
    // Range analysis
    pub const ASSERT_RANGE: &str = "__assert_range";
    pub const REFUTE_RANGE: &str = "__refute_range";
    pub const ASSERT_LOWER_BOUND: &str = "__assert_lower_bound";
    pub const REFUTE_LOWER_BOUND: &str = "__refute_lower_bound";
    pub const REFUTE_UPPER_BOUND: &str = "__refute_upper_bound";
    pub const ASSERT_UPPER_BOUND: &str = "__assert_upper_bound";

    // Alias analysis
    pub const ASSERT_NO_ALIAS: &str = "__assert_no_alias";
    pub const ASSERT_MUST_ALIAS: &str = "__assert_must_alias";
    pub const REFUTE_MUST_ALIAS: &str = "__refute_must_alias";
    pub const ASSERT_MAY_ALIAS: &str = "__assert_may_alias";
    pub const REFUTE_MAY_ALIAS: &str = "__refute_may_alias";
    pub const REFUTE_NO_ALIAS: &str = "__refute_no_alias";

    // General prefixes
    pub const PREFIX_ASSERT: &str = "__assert_";
    pub const PREFIX_REFUTE: &str = "__refute_";
    pub const PREFIX_ASSUME: &str = "__assume_";
}

/// Module containing built-in names of Solidity library functions generated by
/// the Solang compiler.
#[allow(missing_docs)]
#[allow(clippy::missing_docs_in_private_items)]
pub mod solidity_lib {
    pub const ACCOUNT_DATA_ALLOC: &str = "account_data_alloc";
    pub const ACCOUNT_DATA_FREE: &str = "account_data_free";
    pub const ACCOUNT_DATA_LEN: &str = "account_data_len";
    pub const ACCOUNT_DATA_REALLOC: &str = "account_data_realloc";
    pub const ADDRESS_EQUAL: &str = "address_equal";
    pub const ADDRESS_HASH: &str = "address_hash";
    pub const ASHLTI3: &str = "__ashlti3";
    pub const ASHRTI3: &str = "__ashrti3";
    pub const BE32TOLEN: &str = "__be32toleN";
    pub const BENTOLEN: &str = "__beNtoleN";
    pub const BITS128: &str = "bits128";
    pub const BITS256: &str = "bits256";
    pub const BITS512: &str = "bits512";
    pub const BITS: &str = "bits";
    pub const BZERO8: &str = "__bzero8";
    pub const CALL: &str = "call";
    pub const CALLDATACOPY: &str = "callDataCopy";
    pub const CALLDELEGATE: &str = "callDelegate";
    pub const CALLSTATIC: &str = "callStatic";
    pub const CODECOPY: &str = "codeCopy";
    pub const CONCAT: &str = "concat";
    pub const CREATE: &str = "create";
    pub const CREATE_CONTRACT: &str = "create_contract";
    pub const ENTRYPOINT: &str = "entrypoint";
    pub const EXTERNAL_CALL: &str = "external_call";
    pub const FINISH: &str = "finish";
    pub const FREE: &str = "__free";
    pub const GETADDRESS: &str = "getAddress";
    pub const GETBLOCKCOINBASE: &str = "getBlockCoinbase";
    pub const GETBLOCKDIFFICULTY: &str = "getBlockDifficulty";
    pub const GETBLOCKGASLIMIT: &str = "getBlockGasLimit";
    pub const GETBLOCKHASH: &str = "getBlockHash";
    pub const GETBLOCKNUMBER: &str = "getBlockNumber";
    pub const GETBLOCKTIMESTAMP: &str = "getBlockTimestamp";
    pub const GETCALLDATASIZE: &str = "getCallDataSize";
    pub const GETCALLER: &str = "getCaller";
    pub const GETCALLVALUE: &str = "getCallValue";
    pub const GETCODESIZE: &str = "getCodeSize";
    pub const GETEXTERNALBALANCE: &str = "getExternalBalance";
    pub const GETEXTERNALCODESIZE: &str = "getExternalCodeSize";
    pub const GETGASLEFT: &str = "getGasLeft";
    pub const GETRETURNDATASIZE: &str = "getReturnDataSize";
    pub const GETTXGASPRICE: &str = "getTxGasPrice";
    pub const GETTXORIGIN: &str = "getTxOrigin";
    pub const HEX_ENCODE: &str = "hex_encode";
    pub const HEX_ENCODE_REV: &str = "hex_encode_rev";
    pub const INIT_HEAP: &str = "__init_heap";
    pub const LENTOBE32: &str = "__leNtobe32";
    pub const LENTOBEN: &str = "__leNtobeN";
    pub const LLVM_ASSUME: &str = "llvm.assume";
    pub const LLVM_UADD_WITH_OVERFLOW_I64: &str = "llvm.uadd.with.overflow.i64";
    pub const LLVM_WASM_MEMORY_SIZE_I32: &str = "llvm.wasm.memory.size.i32";
    pub const LOG: &str = "log";
    pub const LSHRTI3: &str = "__lshrti3";
    pub const MALLOC: &str = "__malloc";
    pub const MEMCMP: &str = "__memcmp";
    pub const MEMCMP_ORD: &str = "__memcmp_ord";
    pub const MEMCPY8: &str = "__memcpy8";
    pub const MEMCPY: &str = "__memcpy";
    pub const MEMSET8: &str = "__memset8";
    pub const MEMSET: &str = "__memset";
    pub const MUL32: &str = "__mul32";
    pub const PRINTMEM: &str = "printMem";
    pub const REALLOC: &str = "__realloc";
    pub const RETURNDATACOPY: &str = "returnDataCopy";
    pub const REVERT: &str = "revert";
    pub const RIPEMD160: &str = "ripemd160";
    pub const RIPEMD160_COMPRESS: &str = "ripemd160_compress";
    pub const SDIVMOD128: &str = "sdivmod128";
    pub const SDIVMOD256: &str = "sdivmod256";
    pub const SDIVMOD512: &str = "sdivmod512";
    pub const SELFDESTRUC: &str = "selfDestruc";
    pub const SHL128: &str = "shl128";
    pub const SHR128: &str = "shr128";
    pub const SIGNATURE_VERIFY: &str = "signature_verify";
    pub const SOLANG_DISPATCH: &str = "solang_dispatch";
    pub const SOLPUBKEY_SAME: &str = "SolPubkey_same";
    pub const SOL_ACCOUNT_LAMPORT: &str = "sol_account_lamport";
    pub const SOL_CLOCK: &str = "sol_clock";
    pub const SOL_TRANSFER: &str = "sol_transfer";
    pub const SOL_TRY_TRANSFER: &str = "sol_try_transfer";
    pub const STORAGELOAD: &str = "storageLoad";
    pub const STORAGESTORE: &str = "storageStore";
    pub const UDIVMOD128: &str = "udivmod128";
    pub const UDIVMOD256: &str = "udivmod256";
    pub const UDIVMOD512: &str = "udivmod512";
    pub const UINT128DEC: &str = "uint128dec";
    pub const UINT256DEC: &str = "uint256dec";
    pub const UINT2BIN: &str = "uint2bin";
    pub const UINT2DEC: &str = "uint2dec";
    pub const UINT2HEX: &str = "uint2hex";
    pub const VECTOR_HASH: &str = "vector_hash";
    pub const VECTOR_NEW: &str = "vector_new";
}

/// List of all considered Solidity library functions generated by the Solang
/// compiler.
pub const SOLIDITY_LIB_FUNCS: &[&str] = &[
    solidity_lib::ACCOUNT_DATA_ALLOC,
    solidity_lib::ACCOUNT_DATA_FREE,
    solidity_lib::ACCOUNT_DATA_LEN,
    solidity_lib::ACCOUNT_DATA_REALLOC,
    solidity_lib::ADDRESS_EQUAL,
    solidity_lib::ADDRESS_HASH,
    solidity_lib::ASHLTI3,
    solidity_lib::ASHRTI3,
    solidity_lib::BE32TOLEN,
    solidity_lib::BENTOLEN,
    solidity_lib::BITS,
    solidity_lib::BITS128,
    solidity_lib::BITS256,
    solidity_lib::BITS512,
    solidity_lib::BZERO8,
    solidity_lib::CALL,
    solidity_lib::CALLDATACOPY,
    solidity_lib::CALLDELEGATE,
    solidity_lib::CALLSTATIC,
    solidity_lib::CODECOPY,
    solidity_lib::CONCAT,
    solidity_lib::CREATE,
    solidity_lib::CREATE_CONTRACT,
    solidity_lib::ENTRYPOINT,
    solidity_lib::EXTERNAL_CALL,
    solidity_lib::FINISH,
    solidity_lib::FREE,
    solidity_lib::GETADDRESS,
    solidity_lib::GETBLOCKCOINBASE,
    solidity_lib::GETBLOCKDIFFICULTY,
    solidity_lib::GETBLOCKGASLIMIT,
    solidity_lib::GETBLOCKHASH,
    solidity_lib::GETBLOCKNUMBER,
    solidity_lib::GETBLOCKTIMESTAMP,
    solidity_lib::GETCALLDATASIZE,
    solidity_lib::GETCALLER,
    solidity_lib::GETCALLVALUE,
    solidity_lib::GETCODESIZE,
    solidity_lib::GETEXTERNALBALANCE,
    solidity_lib::GETEXTERNALCODESIZE,
    solidity_lib::GETGASLEFT,
    solidity_lib::GETRETURNDATASIZE,
    solidity_lib::GETTXGASPRICE,
    solidity_lib::GETTXORIGIN,
    solidity_lib::HEX_ENCODE,
    solidity_lib::HEX_ENCODE_REV,
    solidity_lib::INIT_HEAP,
    solidity_lib::LENTOBE32,
    solidity_lib::LENTOBEN,
    solidity_lib::LLVM_ASSUME,
    solidity_lib::LLVM_UADD_WITH_OVERFLOW_I64,
    solidity_lib::LLVM_WASM_MEMORY_SIZE_I32,
    solidity_lib::LOG,
    solidity_lib::LSHRTI3,
    solidity_lib::MALLOC,
    solidity_lib::MEMCMP,
    solidity_lib::MEMCMP_ORD,
    solidity_lib::MEMCPY,
    solidity_lib::MEMCPY8,
    solidity_lib::MEMSET,
    solidity_lib::MEMSET8,
    solidity_lib::MUL32,
    solidity_lib::PRINTMEM,
    solidity_lib::REALLOC,
    solidity_lib::RETURNDATACOPY,
    solidity_lib::REVERT,
    solidity_lib::RIPEMD160,
    solidity_lib::RIPEMD160_COMPRESS,
    solidity_lib::SDIVMOD128,
    solidity_lib::SDIVMOD256,
    solidity_lib::SDIVMOD512,
    solidity_lib::SELFDESTRUC,
    solidity_lib::SHL128,
    solidity_lib::SHR128,
    solidity_lib::SIGNATURE_VERIFY,
    solidity_lib::SOLANG_DISPATCH,
    solidity_lib::SOLPUBKEY_SAME,
    solidity_lib::SOL_ACCOUNT_LAMPORT,
    solidity_lib::SOL_CLOCK,
    solidity_lib::SOL_TRANSFER,
    solidity_lib::SOL_TRY_TRANSFER,
    solidity_lib::STORAGELOAD,
    solidity_lib::STORAGESTORE,
    solidity_lib::UDIVMOD128,
    solidity_lib::UDIVMOD256,
    solidity_lib::UDIVMOD512,
    solidity_lib::UINT128DEC,
    solidity_lib::UINT256DEC,
    solidity_lib::UINT2BIN,
    solidity_lib::UINT2DEC,
    solidity_lib::UINT2HEX,
    solidity_lib::VECTOR_HASH,
    solidity_lib::VECTOR_NEW,
];

/// Check whether a function is a library function of C code.
pub fn is_c_library_function(func_name: &str) -> bool {
    C_LIB_FUNCS.contains(&func_name)
}

/// Check whether a function is a main function of C code.
pub fn is_c_main_function(func_name: &str) -> bool {
    func_name.eq(cmain::MAIN)
}

/// Check whether a function is a Solang-generated library function of Solidity.
pub fn is_solidity_library_function(func_name: &str) -> bool {
    SOLIDITY_LIB_FUNCS.contains(&func_name)
}

/// Check whether a function is a entry function of Solidity.
pub fn is_solang_main_function(func_name: &str) -> bool {
    func_name.eq(cmain::MAIN)
}

/// Check whether a function is an LLVM intrinsic function.
pub fn is_llvm_intrinsic_function(func_name: &str) -> bool {
    func_name.eq(llvm_lib::LLVM_DBG_ADDR)
        || func_name.eq(llvm_lib::LLVM_DBG_DECLARE)
        || func_name.eq(llvm_lib::LLVM_DBG_VALUE)
}

/// Check whether a function is a built-in function of Verazt.
pub fn is_assertio_checking_function(func_name: &str) -> bool {
    func_name.starts_with(verazt_lib::PREFIX_ASSERT)
        || func_name.starts_with(verazt_lib::PREFIX_REFUTE)
        || func_name.starts_with(verazt_lib::PREFIX_ASSUME)
}

/// Check whether a function is `__assert_range`
pub fn check_assert_range_full(func_name: &str) -> bool {
    if func_name.eq(verazt_lib::ASSERT_RANGE) {
        return true;
    }
    false
}

/// Check whether a function is `__assert_lower_bound`
pub fn check_assert_range_lower_bound(input_func: &str) -> bool {
    if input_func.eq(verazt_lib::ASSERT_LOWER_BOUND) {
        return true;
    }
    false
}

/// Check whether a function is `__assert_upper_bound`
pub fn check_assert_range_upper_bound(input_func: &str) -> bool {
    if input_func.eq(verazt_lib::ASSERT_UPPER_BOUND) {
        return true;
    }
    false
}
